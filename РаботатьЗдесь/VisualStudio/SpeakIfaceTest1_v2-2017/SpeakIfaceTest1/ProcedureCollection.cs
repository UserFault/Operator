using System;
using System.Collections.Generic;

namespace SpeakIfaceTest1
{
    /// <summary>
    /// Список процедур
    /// </summary>
    public class ProcedureCollection
    {
        /// <summary>
        /// Список объектов процедур
        /// </summary>
        private List<Procedure> m_proclist;

        /// <summary>
        /// Default constructor
        /// </summary>
        public ProcedureCollection()
        {
            this.m_proclist = new List<Procedure>();
        }

        /// <summary>
        /// Список объектов процедур
        /// </summary>
        public List<Procedure> Procedures
        {
            get { return m_proclist; }
        }



        /// <summary>
        /// NR-Заполнить эту коллекцию процедурами вручную, описав их в коде
        /// </summary>
        internal void FillHardcodedProcedures()
        {
            //TODO: Заполнить эту коллекцию процедурами вручную, описав их в коде
            //TODO: Описать правила заполнения полей объекта, привести ссылки на форматы, документацию.

            Procedure p;

            //Это шаблон, образец, не трогать его!

            //p = new Procedure();
            ////заполнить вручную поля
            //p.Title = "";//Название процедуры, в работе механизма не используется
            //p.Regex = "";//Регулярное выражение, простое или сложное.
            //p.ExecutionPath = "";//Путь к функции в сборке или к приложению, может содержать аргументы.
            //p.Descr = "";//Текст описания сущности, не обязателен, в работе механизма не используется.
            //p.Ves = 0.00;//Вес процедуры в пределах от 0 (раньше всех в очереди) до 1 (позже всех в очереди) 
            ////добавление в коллекцию
            //this.m_proclist.Add(p);

            ///////////////////////////////////////////////////////////////////////////////

            p = new Procedure();
            //заполнить вручную поля
            p.Title = "Тест эхо";//Название процедуры, в работе механизма не используется
            p.Regex = "тест эхо";//Регулярное выражение, простое или сложное.
            p.Path = "FirstProcedures.Procedures.CommandHandlerExample()";//Путь к функции в сборке или к приложению, может содержать аргументы.
            p.Description = "Тестирование вывода на консоль из загружаемого обработчика команды";//Текст описания сущности, не обязателен, в работе механизма не используется.
            //p.Ves = 0.00;//Вес процедуры
            //добавление в коллекцию
            this.m_proclist.Add(p);

            p = new Procedure();
            //заполнить вручную поля
            p.Title = "Открыть место";//Название процедуры, в работе механизма не используется
            p.Regex = "открыть %место";//Регулярное выражение, простое или сложное.
            p.Path = "%место";//Путь к функции в сборке или к приложению, может содержать аргументы.
            p.Description = "Тестирование работы с местами";//Текст описания сущности, не обязателен, в работе механизма не используется.
            p.Ves = 0.9;//Вес процедуры
            //добавление в коллекцию
            this.m_proclist.Add(p);

            p = new Procedure();
            //заполнить вручную поля
            p.Title = "Найти в Инвентаре";//Название процедуры, в работе механизма не используется
            p.Regex = "найти в инвентаре %предмет";//Регулярное выражение, простое или сложное.
            p.Path = "inv:\\\\%предмет";//Путь к функции в сборке или к приложению, может содержать аргументы.
            p.Description = "найти в инвентаре предмет";//Текст описания сущности, не обязателен, в работе механизма не используется.
            p.Ves = 0.50;//Вес процедуры
            //добавление в коллекцию
            this.m_proclist.Add(p);

            p = new Procedure();
            //заполнить вручную поля
            p.Title = "Найти предмет";//Название процедуры, в работе механизма не используется
            p.Regex = "найти предмет %предмет";//Регулярное выражение, простое или сложное.
            p.Path = "inv:\\\\%предмет";//Путь к функции в сборке или к приложению, может содержать аргументы.
            p.Description = "найти в инвентаре предмет";//Текст описания сущности, не обязателен, в работе механизма не используется.
            p.Ves = 0.50;//Вес процедуры
            //добавление в коллекцию
            this.m_proclist.Add(p);


            ////Самая общая процедура, принимает все необработанные ранее запросы. Сейчас она вызывает исключение, так как неправильно выполняется. 
            //p = new Procedure();
            ////заполнить вручную поля
            //p.Title = "Любой запрос";//Название процедуры, в работе механизма не используется
            //p.Regex = "%запрос";//Регулярное выражение, простое или сложное.
            //p.Path = "%запрос";//Путь к функции в сборке или к приложению, может содержать аргументы.
            //p.Description = "Пытается исполнить любой запрос как он есть";//Текст описания сущности, не обязателен, в работе механизма не используется.
            //p.Ves = 0.99;//Вес процедуры
            ////добавление в коллекцию
            //this.m_proclist.Add(p);

            //сортировать процедуры по весу обязательно
            this.m_proclist.Sort(Procedure.SortByVes);

            return;
        }

        internal void FillFromDb(List<Procedure> list)
        {
            this.m_proclist.AddRange(list);
            //сортировать процедуры по весу обязательно, иначе команды будут исполняться не по их весу.
            this.m_proclist.Sort(Procedure.SortByVes);

            return;
        }
        ///// <summary>
        ///// for first time only
        ///// </summary>
        ///// <param name="m_db"></param>
        //internal void FillDbTest(DbAdapter db)
        //{
        //    this.FillHardcodedProcedures();
        //    foreach (Procedure p in m_proclist)
        //        db.AddProcedure(p);
        //    return;
        //}
        /// <summary>
        /// NT-Очистить коллекцию
        /// </summary>
        internal void Clear()
        {
            this.m_proclist.Clear();
        }


        /// <summary>
        /// NT-Выбрать из БД Процедуры по названию, без учета регистра символов
        /// </summary>
        /// <param name="title">Название Процедуры</param>
        /// <returns>Возвращает список Процедур с указанным названием</returns>
        internal List<Procedure> getByTitle(string title)
        {
            List<Procedure> result = new List<Procedure>();
            foreach (Procedure p in this.m_proclist)
            {
                if (String.Equals(p.Title, title, StringComparison.OrdinalIgnoreCase))
                    result.Add(p);
            }

            return result;
        }
    }
}
